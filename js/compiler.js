/*
  This module accepts the parse tree generated by the parser,
  evaluates each item, and produces the output code to run in js with evaluator.
*/

var subroutines = require('./subroutines');
var _ = require('../bower_components/lodash/dist/lodash');
var l = function(c) {
    console.log(c)
}
var throwIfFalse = function(test, msg) {
    if (!test) {
        throw {message: msg}
    }
    return test
}

exports.run = function(tree) {
    var evalLeaf = function(leaf) {
        if (!leaf.type)
            return leaf;
        if (leaf.type === 'main object') {
            return _.reduce(leaf.body, function(ac, node) {
                return ac + evalLeaf(node)
            }, "")
        }
        if (leaf.type === 'expression') {
            var args = _.select(leaf.body,
                function(x, i) {
                    return i % 2 === 0
                });
            var lhs = throwIfFalse(leaf.body[0], "Expression had no function name (first part).")
            return throwIfFalse(subroutines.functions[evalLeaf(lhs)], 'No function by the name of ' + lhs)(args.map(evalLeaf))
        }
        if (leaf.type === 'hash') {
            var hash = {}
            var modf = function(x, i) {
                return i % 2 === 0
            }
            var keysAndVals = _.select(leaf.body, modf)
            var keys = _.select(keysAndVals, modf)
            var vals = _.select(keysAndVals,
                function(x, i) {
                    return i % 2 === 1
                });

            return "Object({" + _.reduce(_.zip(keys, vals),
                function(ac, pair) {
                    throwIfFalse(pair[0], "No lhs of hash")
                    throwIfFalse(pair[1], "No rhs of hash")
                    return ac.concat(evalLeaf(pair[0]) + ": " + evalLeaf(pair[1]))
                }, []).join(",") + "});"
        }
        if (leaf.type === 'identifier') {
            return leaf.value.toString();
        }
    }

    return evalLeaf(tree)
}
